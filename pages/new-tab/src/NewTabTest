import '@src/NewTab.css';
import '@src/NewTab.scss';
import { useEffect, useState } from 'react';
import { useStorage, withErrorBoundary, withSuspense } from '@extension/shared';
import { exampleThemeStorage } from '@extension/storage';
import { Button } from '@extension/ui';
import { t } from '@extension/i18n';

const NewTab = () => {
  const [inputText, setInputText] = useState<string>('');
  const [summary, setSummary] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);

  useEffect(() => {
    checkIfLoggedIn();
  }, []);

  const checkIfLoggedIn = async () => {
    chrome.identity.getAuthToken({ interactive: false }, (token) => {
      if (token) {
        setIsLoggedIn(true);
      } else {
        setIsLoggedIn(false);
      }
    });
  };

  const getAccessToken = async (): Promise<string> => {
    return new Promise((resolve, reject) => {
      chrome.identity.getAuthToken({ interactive: true }, (token) => {
        if (chrome.runtime.lastError || !token) {
          reject(new Error(chrome.runtime.lastError?.message || 'Failed to get auth token'));
        } else {
          setIsLoggedIn(true);
          resolve(token);
        }
      });
    });
  };

  const logout = () => {
    chrome.identity.getAuthToken({ interactive: false }, (token) => {
      if (chrome.runtime.lastError) {
        console.error(chrome.runtime.lastError.message);
        return;
      }

      if (token) {
        chrome.identity.removeCachedAuthToken({ token }, () => {
          if (chrome.runtime.lastError) {
            console.error(chrome.runtime.lastError.message);
          } else {
            console.log('Successfully logged out.');
            setIsLoggedIn(false);
          }
        });
      }
    });
  };

  const getCaptionsList = async (): Promise<string> => {
    const videoId: string = "CxGSnA-RTsA";
    const captionsListUrl = `https://www.googleapis.com/youtube/v3/captions?part=snippet&videoId=${videoId}`;

    try {
      const accessToken = await getAccessToken();

      const response = await fetch(captionsListUrl, {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          Accept: 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error('Failed to fetch captions list');
      }

      const data = await response.json();
      if (data.items && data.items.length > 0) {
        const englishCaption = data.items.find(
          (item: any) => item.snippet.language === 'en'
        );

        if (!englishCaption) {
          console.error('No English captions available for this video.');
          return '';
        }

        const captionId = englishCaption.id;
        const captionsUrl = `https://www.googleapis.com/youtube/v3/captions/${captionId}?tfmt=srv3`;

        const captionsResponse = await fetch(captionsUrl, {
          headers: {
            Authorization: `Bearer ${accessToken}`,
            Accept: 'application/json',
          },
        });

        if (!captionsResponse.ok) {
          throw new Error('Failed to fetch captions.');
        }

        const captionsText = await captionsResponse.text();
        console.log('Fetched English Captions Text:', captionsText);
        return captionsText;
      } else {
        console.error('No captions available for this video.');
        return '';
      }
    } catch (error) {
      console.error('Error fetching captions:', error);
      return '';
    }
  };

  const summarizeCaptions = async () => {
    setIsLoading(true);
    setSummary('');

    try {
      const captions = await getCaptionsList();
      if (!captions) {
        alert('No captions available for this video.');
        setIsLoading(false);
        return;
      }

      console.log(captions);
      await handleSummarize(captions);
    } catch (error) {
      console.error('Error processing captions:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSummarize = async (captionsText: string) => {
    try {
      if (!('ai' in self && 'summarizer' in self.ai)) {
        alert('Summarizer API is not supported in this browser.');
        setIsLoading(false);
        return;
      }

      const options = {
        type: 'key-points',
        format: 'markdown',
        length: 'medium',
      };

      const available = (await self.ai.summarizer.capabilities()).available;
      let summarizer;
      if (available === 'no') {
        return;
      }
      if (available === 'readily') {
        summarizer = await self.ai.summarizer.create(options);
      } else {
        summarizer = await self.ai.summarizer.create(options);
        summarizer.addEventListener('downloadprogress', (e) => {
          console.log(e.loaded, e.total);
        });
        await summarizer.ready;
      }

      const summary = await summarizer.summarize(captionsText);
      setSummary('' + summary);
    } catch (error) {
      console.error('Error using Summarizer API:', error);
      alert('An error occurred while summarizing the text.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container">
      <h1>Summarizer</h1>
      <textarea
        placeholder="Enter text to summarize..."
        value={inputText}
        onChange={(e) => setInputText(e.target.value)}
      />
      <button onClick={summarizeCaptions} disabled={isLoading}>
        {isLoading ? 'Summarizing...' : 'Summarize'}
      </button>
      {summary && (
        <div className="summary-box">
          <h2>Summary:</h2>
          <p>{summary}</p>
        </div>
      )}
      {isLoggedIn && (
        <button onClick={logout}>
          Logout
        </button>
      )}
    </div>
  );
};

export default withErrorBoundary(withSuspense(NewTab, <div>{t('loading')}</div>), <div>Error Occur</div>);
